{"code":"import { emitter } from './emitter';\r\nimport { Events } from '../types';\r\nexport const toastDispatcher = ({ dispatch, delay }) => {\r\n    emitter.on(Events.SHOW, (toast) => {\r\n        dispatch({ type: 'ADD', toast });\r\n        if (delay)\r\n            setTimeout(() => {\r\n                dispatch({ type: 'REMOVE', id: toast.id });\r\n            }, delay);\r\n    });\r\n    emitter.on(Events.HIDE, (id) => dispatch({ type: 'REMOVE', id }));\r\n    emitter.on(Events.HIDE_ALL, () => dispatch({ type: 'REMOVE_ALL' }));\r\n};\r\n//# sourceMappingURL=toastDispatcher.js.map","references":["/home/tmdev/HD/Libraries/toast/React/Toast-react/toastlib/src/utils/emitter.ts","/home/tmdev/HD/Libraries/toast/React/Toast-react/toastlib/src/types/index.ts","/home/tmdev/HD/Libraries/toast/React/Toast-react/toastlib/src/hooks/index.ts"],"map":"{\"version\":3,\"file\":\"toastDispatcher.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/toastDispatcher.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,OAAO,EAAE,MAAM,EAAS,MAAM,UAAU,CAAA;AAQxC,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAoB,EAAE,EAAE;IACvE,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAY,EAAE,EAAE;QACvC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;QAEhC,IAAI,KAAK;YACP,UAAU,CAAC,GAAG,EAAE;gBACd,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAA;YAC5C,CAAC,EAAE,KAAK,CAAC,CAAA;IACb,CAAC,CAAC,CAAA;IAEF,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAU,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;IAEzE,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,CAAA;AACrE,CAAC,CAAA\"}","dts":{"name":"/home/tmdev/HD/Libraries/toast/React/Toast-react/toastlib/utils/toastDispatcher.d.ts","writeByteOrderMark":false,"text":"import { TAction } from '../hooks';\r\ninterface IToastDispatcher {\r\n    dispatch: (value: TAction) => void;\r\n    delay?: number;\r\n}\r\nexport declare const toastDispatcher: ({ dispatch, delay }: IToastDispatcher) => void;\r\nexport {};\r\n"}}
